{"ast":null,"code":"var _jsxFileName = \"/Users/ha/Desktop/lang/fastapi_rag/frontend/src/components/IndicesBar.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport * as tw from '../css/IndicesBar.tw';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GROUP_SIZE = 5;\nconst IndicesBar = () => {\n  _s();\n  const [indices, setIndices] = useState([]);\n  const [groupIdx, setGroupIdx] = useState(0);\n  useEffect(() => {\n    fetch('/api/indices').then(res => res.json()).then(data => setIndices(Array.isArray(data.indices) ? data.indices : []));\n  }, []);\n  useEffect(() => {\n    if (indices.length === 0) return;\n    const interval = setInterval(() => {\n      setGroupIdx(idx => (idx + 1) % Math.ceil(indices.length / GROUP_SIZE));\n    }, 3000);\n    return () => clearInterval(interval);\n  }, [indices]);\n  const start = groupIdx * GROUP_SIZE;\n  const end = start + GROUP_SIZE;\n  const currentGroup = indices.slice(start, end);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: tw.indicesBar,\n    children: currentGroup.map(idx => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: tw.indexItem,\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: tw.indexName,\n        children: idx.ticker\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: idx.change && idx.change.startsWith('+') ? tw.indexChangeUp : tw.indexChangeDown,\n        children: idx.change\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this)]\n    }, idx.ticker, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_s(IndicesBar, \"57zA0a2HECJRpX8OghwBoZBUAw8=\");\n_c = IndicesBar;\nexport default IndicesBar;\nvar _c;\n$RefreshReg$(_c, \"IndicesBar\");","map":{"version":3,"names":["React","useEffect","useState","tw","jsxDEV","_jsxDEV","GROUP_SIZE","IndicesBar","_s","indices","setIndices","groupIdx","setGroupIdx","fetch","then","res","json","data","Array","isArray","length","interval","setInterval","idx","Math","ceil","clearInterval","start","end","currentGroup","slice","className","indicesBar","children","map","indexItem","indexName","ticker","fileName","_jsxFileName","lineNumber","columnNumber","change","startsWith","indexChangeUp","indexChangeDown","_c","$RefreshReg$"],"sources":["/Users/ha/Desktop/lang/fastapi_rag/frontend/src/components/IndicesBar.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport * as tw from '../css/IndicesBar.tw';\n\ninterface IndexData {\n  ticker: string;\n  name: string;\n  change: string;\n}\n\nconst GROUP_SIZE = 5;\n\nconst IndicesBar: React.FC = () => {\n  const [indices, setIndices] = useState<IndexData[]>([]);\n  const [groupIdx, setGroupIdx] = useState(0);\n\n  useEffect(() => {\n    fetch('/api/indices')\n      .then(res => res.json())\n      .then(data => setIndices(Array.isArray(data.indices) ? data.indices : []));\n  }, []);\n\n  useEffect(() => {\n    if (indices.length === 0) return;\n    const interval = setInterval(() => {\n      setGroupIdx(idx => (idx + 1) % Math.ceil(indices.length / GROUP_SIZE));\n    }, 3000);\n    return () => clearInterval(interval);\n  }, [indices]);\n\n  const start = groupIdx * GROUP_SIZE;\n  const end = start + GROUP_SIZE;\n  const currentGroup = indices.slice(start, end);\n\n  return (\n    <div className={tw.indicesBar}>\n      {currentGroup.map(idx => (\n        <div className={tw.indexItem} key={idx.ticker}>\n          <span className={tw.indexName}>{idx.ticker}</span>\n          <span className={idx.change && idx.change.startsWith('+') ? tw.indexChangeUp : tw.indexChangeDown}>{idx.change}</span>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default IndicesBar;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAO,KAAKC,EAAE,MAAM,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAQ3C,MAAMC,UAAU,GAAG,CAAC;AAEpB,MAAMC,UAAoB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAc,EAAE,CAAC;EACvD,MAAM,CAACS,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC;EAE3CD,SAAS,CAAC,MAAM;IACdY,KAAK,CAAC,cAAc,CAAC,CAClBC,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACvBF,IAAI,CAACG,IAAI,IAAIP,UAAU,CAACQ,KAAK,CAACC,OAAO,CAACF,IAAI,CAACR,OAAO,CAAC,GAAGQ,IAAI,CAACR,OAAO,GAAG,EAAE,CAAC,CAAC;EAC9E,CAAC,EAAE,EAAE,CAAC;EAENR,SAAS,CAAC,MAAM;IACd,IAAIQ,OAAO,CAACW,MAAM,KAAK,CAAC,EAAE;IAC1B,MAAMC,QAAQ,GAAGC,WAAW,CAAC,MAAM;MACjCV,WAAW,CAACW,GAAG,IAAI,CAACA,GAAG,GAAG,CAAC,IAAIC,IAAI,CAACC,IAAI,CAAChB,OAAO,CAACW,MAAM,GAAGd,UAAU,CAAC,CAAC;IACxE,CAAC,EAAE,IAAI,CAAC;IACR,OAAO,MAAMoB,aAAa,CAACL,QAAQ,CAAC;EACtC,CAAC,EAAE,CAACZ,OAAO,CAAC,CAAC;EAEb,MAAMkB,KAAK,GAAGhB,QAAQ,GAAGL,UAAU;EACnC,MAAMsB,GAAG,GAAGD,KAAK,GAAGrB,UAAU;EAC9B,MAAMuB,YAAY,GAAGpB,OAAO,CAACqB,KAAK,CAACH,KAAK,EAAEC,GAAG,CAAC;EAE9C,oBACEvB,OAAA;IAAK0B,SAAS,EAAE5B,EAAE,CAAC6B,UAAW;IAAAC,QAAA,EAC3BJ,YAAY,CAACK,GAAG,CAACX,GAAG,iBACnBlB,OAAA;MAAK0B,SAAS,EAAE5B,EAAE,CAACgC,SAAU;MAAAF,QAAA,gBAC3B5B,OAAA;QAAM0B,SAAS,EAAE5B,EAAE,CAACiC,SAAU;QAAAH,QAAA,EAAEV,GAAG,CAACc;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eAClDpC,OAAA;QAAM0B,SAAS,EAAER,GAAG,CAACmB,MAAM,IAAInB,GAAG,CAACmB,MAAM,CAACC,UAAU,CAAC,GAAG,CAAC,GAAGxC,EAAE,CAACyC,aAAa,GAAGzC,EAAE,CAAC0C,eAAgB;QAAAZ,QAAA,EAAEV,GAAG,CAACmB;MAAM;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC;IAAA,GAFrFlB,GAAG,CAACc,MAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAGxC,CACN;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACjC,EAAA,CAhCID,UAAoB;AAAAuC,EAAA,GAApBvC,UAAoB;AAkC1B,eAAeA,UAAU;AAAC,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}